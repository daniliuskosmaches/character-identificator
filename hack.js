const fs = require('fs');
const path = require('path');

// your folder
const IMAGES_DIR = './images';

// check is dir exist
if (!fs.existsSync(IMAGES_DIR)) {
    console.log('‚ùå –ü–∞–ø–∫–∞ images –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!');
    console.log('üìÅ –°–æ–∑–¥–∞–π—Ç–µ –ø–∞–ø–∫—É images –∏ –ø–æ–ª–æ–∂–∏—Ç–µ —Ç—É–¥–∞ –∫–∞—Ä—Ç–∏–Ω–∫–∏');
    process.exit(1);
}

// read file 
const imageFiles = fs.readdirSync(IMAGES_DIR);

if (imageFiles.length === 0) {
    console.log('–í –ø–∞–ø–∫–µ images –Ω–∏—Ö—É—è –Ω–µ—Ç!');
    console.log('–Ω–µ –ª–µ–Ω–∏—Å—å –∏–ª–∏ –æ—Ç—å–µ–±–∏—Å—å');
    process.exit(1);
}

console.log(`üìÅ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ : ${imageFiles.length}`);

// character database on this it will generate the new characters
const CHARACTER_DATABASE = {
    'amurika': { name: '–ö–∞–ø–∏—Ç–∞–Ω –ê–º–µ—Ä–∏–∫–∞', desc: '–ö–∞–ø–∏—Ç–∞–Ω –ë—É—Ä–≥–µ—Ä–∞', price: 5000 },
    'tonysrark': { name: '–ñ–µ–ª–µ–∑–Ω—ã–π –ß–µ–ª–æ–≤–µ–∫', desc: '–ì–µ–Ω–∏–π, –º–∏–ª–ª–∏–∞—Ä–¥–µ—Ä, –ø–ª–µ–π–±–æ–π, —Ñ–∏–ª–∞–Ω—Ç—Ä–æ–ø', price: 6000 },
    'batgerrl': { name: '–ë—ç—Ç–≥–µ—Ä–ª', desc: '–û—Ç–≤–∞–∂–Ω–∞—è –≥–µ—Ä–æ–∏–Ω—è –ì–æ—Ç—ç–º–∞', price: 5500 },
    'minicraftblyat': { name: '–ú–∞–π–Ω–∫—Ä–∞—Ñ—Ç', desc: '–¢—é—Ä–∏–Ω–≥ –ø–æ–ª–Ω–∞—è –∏–≥—Ä–∞', price: 4500 },
    'piero': { name: '–ü—å–µ—Ä–æ', desc: '–î–µ–¥ –∏–Ω—Å–∞–π–¥ —Å —Å—Å—Å—Ä', price: 6500 },
    'ronaldo': { name: '–§—É—Ç–±–æ–ª–∏—Å—Ç', desc: '–û—Ç–µ—Ü —Ä–æ–Ω–∞–ª–¥–æ', price: 5000 },
    'garypotter': { name: '–ì–∞—Ä—Ä–∏ –ü–æ—Ç—Ç–µ—Ä', desc: '–Æ–Ω—ã–π –≤–æ–ª—à–µ–±–Ω–∏–∫ –∏–∑ –•–æ–≥–≤–∞—Ä—Ç—Å–∞', price: 6000 },
    'shrek': { name: '–®—Ä–µ–∫', desc: '–ö—Ç–æ –ø—Ä–æ–∂–∏–≤–∞–µ—Ç –Ω–∞ –¥–Ω–µ –±–æ–ª–æ—Ç–∞', price: 8000 },
    'superpidor': { name: '–°—É–ø–µ—Ä–º–µ–Ω', desc: '–õ—É–Ω—Ç–∏–∫ –≤ –ø–ª–∞—â–µ', price: 5500 },
    'fredy': { name: '–§—Ä–µ–¥–¥–∏ –§–∞–∑–±–µ—Ä', desc: '–ü–æ–∏–≥—Ä–∞–π —Å –º–µ–¥–≤–µ–¥–µ–º', price: 5500 },
    'belosnezhka': { name: '–ë–µ–ª–æ—Å–Ω–µ–∂–∫–∞', desc: '–°–∞–º–∞—è –¥–æ–±—Ä–∞—è –ø—Ä–∏–Ω—Ü–µ—Å—Å–∞', price: 5500 },
    'halk': { name: '–•–∞–ª–∫', desc: '–ó–µ–ª–µ–Ω–Ω—ã–π –∫–∞—á–æ–∫', price: 5000 }
};

const charactersData = [];

// reading all files
imageFiles.forEach(imageFile => {
    const filename = path.parse(imageFile).name.toLowerCase();
    console.log(`üîç –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é: ${imageFile}`);
    
    // –ò—â–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    let characterData = null;
    
    for (const [key, data] of Object.entries(CHARACTER_DATABASE)) {
        if (filename.includes(key)) {
            characterData = { ...data };
            break;
        }
    }
    
    // if there is generate
    if (!characterData) {
        const name = generateNameFromFilename(filename);
        characterData = {
            name: name,
            desc: `–û–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è ${name}`,
            price: generateRandomPrice(4500, 8000)
        };
        console.log(`   ‚ö° –ê–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ: ${name}`);
    } else {
        console.log(`   ‚úÖ –ù–∞–π–¥–µ–Ω–æ –≤ –±–∞–∑–µ: ${characterData.name}`);
    }
    
    charactersData.push({
        name: characterData.name,
        desc: characterData.desc,
        image: `images/${imageFile}`,
        price: characterData.price
    });
});

// plus function
function generateNameFromFilename(filename) {
    return filename
        .replace(/[^a-zA-Z–∞-—è–ê-–Ø]/g, ' ')
        .split(' ')
        .map(word => word.charAt(0).toUpperCase() + word.slice(1))
        .join(' ')
        .trim();
}

function generateRandomPrice(min, max) {
    return Math.floor(Math.random() * (max - min + 1)) + min;
}

// saving result in the same directory
const output = `const charactersData = ${JSON.stringify(charactersData, null, 2)};\n\nexport default charactersData;`;
fs.writeFileSync('./charactersData.js', output);

console.log('\n‚úÖ –ì–æ—Ç–æ–≤–æ!');
console.log(`üìä –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π: ${charactersData.length}`);
console.log('üíæ –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω: charactersData.js');
